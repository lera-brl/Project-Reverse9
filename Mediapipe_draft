mport cv2
import mediapipe as mp

# Set up FaceMesh and drawing utilities
mp_face_mesh = mp.solutions.face_mesh
mp_drawing = mp.solutions.drawing_utils

# Start video capture
cap = cv2.VideoCapture(0)

# Distance threshold (adjust if needed)
DESIRED_FACE_WIDTH = 400  # pixels, estimated face width at 45 cm

# Landmarks to track (custom selection)
LANDMARKS = {
    "chin": 152,
    "left_cheek": 234,
    "right_cheek": 454,
    "top_forehead": 10,
    "nose_tip": 1,
    "left_eye": 33,
    "right_eye": 263,
    "left_eyebrow": 105,
    "right_eyebrow": 334,
    "top_lip": 13,
    "bottom_lip": 14
}

photo_taken = False

with mp_face_mesh.FaceMesh(static_image_mode=False, max_num_faces=1, refine_landmarks=True) as face_mesh:
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        frame = cv2.flip(frame, 1)  # Mirror effect for realistic mirror view
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = face_mesh.process(rgb_frame)

        if results.multi_face_landmarks:
            landmarks = results.multi_face_landmarks[0].landmark
            h, w, _ = frame.shape

            # Estimate face width between cheeks
            left = landmarks[LANDMARKS["left_cheek"]]
            right = landmarks[LANDMARKS["right_cheek"]]
            face_width = abs((right.x - left.x) * w)

            if not photo_taken and DESIRED_FACE_WIDTH - 30 <= face_width <= DESIRED_FACE_WIDTH + 30:
                for label, idx in LANDMARKS.items():
                    landmark = landmarks[idx]
                    cx, cy = int(landmark.x * w), int(landmark.y * h)
                    cv2.circle(frame, (cx, cy), 2, (0, 255, 0), -1)
                    print(f"{label}: ({cx}, {cy})")

                cv2.imwrite("captured_face.png", frame)
                print("Photo saved as captured_face.png")
                photo_taken = True

        cv2.imshow("FaceMesh Detection", frame)

        if cv2.waitKey(5) & 0xFF == ord('q'):
            break

cap.release()
cv2.destroyAllWindows()
